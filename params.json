{"name":"Gomme","tagline":"Gomme is a lightweight tool for creating JavaScript data structures with eventful properties.","body":"### Gomme\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gomme is a lightweight tool for creating JavaScript data structures with eventful properties.  When a property changes, an event is fired.  This allows you to respond to changes in data as they occur.\r\n\r\n### Usage\r\nInclude the JavaScript file in your HTML.\r\n```html\r\n\t<script type=\"text/javascript\" src=\"gomme.js\"></script>\r\n```\r\nCreate a class based on a model\r\n```javascript\r\nvar person = Gomme.model(\"person\", \r\n\t{\r\n\t\tage:18,\r\n\t\tname:{\r\n\t\t\tfirst:\"John\",\r\n\t\t\tmiddle:\"Major\",\r\n\t\t\tlast:\"Doe\"\r\n\t\t},\r\n\t\tbirthday:{\r\n\t\t\tmonth:2,\r\n\t\t\tday:12,\r\n\t\t\tyear:1987\r\n\t\t}\r\n\t}\r\n);\r\n```\r\nThe code above creates and returns the `person` class. Now, the following can be done:\r\n```javascript\r\nvar someone = new person();\r\n```\r\nThe variable `someone` will contain the same structure as above, along with all the default values. Now event listeners can be created to handle change. Here's how to handle change:\r\n```javascript\r\nvar someone = new person();\r\nsomeone.$.on(\"age\", function(e){\r\n\tconsole.log(\"Old value \"+e.old+\" was changed to \"+e.new);\r\n});\r\nsomeone.age = 47;\r\n```\r\nThe above would generate a `console.log` with the message `Old value 18 was changed to 47`.  Despite inheriting values, instances don't hold copies of default values.\r\n\r\nIf you wanted to add an event listener to a nested member, simply call the `$.on` function on the desired child. For example:\r\n```javascript\r\nvar someone = new person();\r\nsomeone.name.$.on(\"first\", function(e){\r\n\tconsole.log(\"Old value \"+e.old+\" was changed to \"+e.new);\r\n});\r\nsomeone.name.first = \"Lemon\";\r\n```\r\nThe above would generate a `console.log` with the message `Old value John was changed to Lemon`.\r\n\r\nWhen finished with an instance, it can safely be disposed of by calling `instance.$.dispose()`. The prior example would use `someone.$.dispose()`.\r\n\r\n### Advanced Usage\r\n\r\n##### Monitoring All Properties For Change\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It is possible to monitor all properties for change using the `$.on` function with a property name of `*`.  The code below shows how to use this feature.\r\n```javascript\r\nvar someone = new person();\r\nsomeone.$.on(\"*\", function(e){\r\n\tconsole.log(e);\r\n});\r\nsomeone.name.first = \"Lemon\";\r\n```\r\nThe above would generate a `console.log` with an object.  The `e` object in the prior example has the following structure:\r\n```javascript\r\n{\r\n\tnew:\"Lemony\",      //the new, current value\r\n\told:\"John\",        //the previous value\r\n\towner:person_name, //the class or sublclass that triggered the event\r\n\tproperty:\"first\"   //the name of the property\r\n}\r\n```\r\n\r\n##### Manually Triggering Events\r\nEvents are triggered when values change, but they can also be triggered manually using the `$.trigger` function.  The following is an example of its usage.\r\n```javascript\r\nvar someone = new person();\r\nsomeone.$.on(\"age\", function(e){\r\n\tconsole.log(\"Old value \"+e.old+\" was changed to \"+e.new);\r\n});\r\nsomeone.$.trigger(\"age\", {\r\n\told:10,\r\n\tnew:20\r\n});\r\n```\r\nThe above would generate a `console.log` with the message `Old value 10 was changed to 20`. The `$.trigger` function should be passed an object formatted similarly to that generated when an event is triggered by Gomme. A previous example shows the contents of the `e` variable, which follows the expected format.\r\n\r\n###### Removing Events\r\nSometimes an event needs to be removed.  When the `$.on` function is called, it returns a handle object that contains two methods, `remove` and `removeAll`.  The `remove` method removes the event that was added from the `$.on` function call that resulted in that handle. The `removeAll` method removes all the functions assigned under the event passed to the `$.on` function that resulted in that handle. Check out the example below for a little more clarity.\r\n```javascript\r\nvar someone = new person();\r\nvar handle = someone.$.on(\"age\", function(e){\r\n\tconsole.log(\"Old value \"+e.old+\" was changed to \"+e.new);\r\n\thandle.remove();\r\n});\r\n```\r\nWhen `age` is changed on `someone`, the function assigned to the age change event will run and then be removed.  `remove` allows the removal of specific functions. If `removeAll` had been used, it would have removed all functions set to be run by the age changed event.\r\n\r\n###### Arrays In Models\r\nModels can contain arrays; these will also trigger events. Consider the following structure,\r\n```javascript\r\nvar person = Gomme.model(\"person\", \r\n\t{\r\n\t\tage:18,\r\n\t\tname:{\r\n\t\t\tfirst:\"John\",\r\n\t\t\tmiddle:\"Major\",\r\n\t\t\tlast:\"Doe\"\r\n\t\t},\r\n\t\tbirthday:{\r\n\t\t\tmonth:2,\r\n\t\t\tday:12,\r\n\t\t\tyear:1987\r\n\t\t},\r\n\t\tfriends:[]\r\n\t}\r\n);\r\n```\r\nOnce an instance of the person model has been created, the `friends` property will contain an array with modified functions.  When these functions are called, they trigger events. Here's an example of how to use them.\r\n```javascript\r\nvar someone = new person();\r\nsomeone.friends.$.on(\"push\", function(e){\r\n\tconsole.log(e);\r\n});\r\nsomeone.friends.push(\"Fred\");\r\n```\r\nThe above would generate a `console.log` with an object.  The `e` object has the following structure:\r\n```javascript\r\n{\r\n\targuments:[\"Fred\"], //the argument given to the function\r\n\tresult:1  //the result of running the function\r\n}\r\n```\r\n###### Async Disposal\r\nDisposal deletes properties and nulls variables to properly trigger garbage collection; this can be rather intensive sometimes.  If it's becoming an issue, the process has an async mode that can be activated.  By running `$.dispose(true)`, dispose can be made to run whenever it gets processor time instead of running immediately. If dispose is called with a callback (`$.dispose(callback)`), it will also run asynchronously and will run the callback when finished.\r\n\r\n### Future Features\r\n###### Managing Collections\r\n###### On-The-Fly Additions/Removals\r\n###### Anonymous Adds\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}